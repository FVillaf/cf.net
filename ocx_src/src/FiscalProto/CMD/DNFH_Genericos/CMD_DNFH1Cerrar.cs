// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2022 - Federico Villafañes (federvillaf@hotmail.com)
// http://www.moretti.com.ar y Federico Villafañes - All Rights Reserved

// CMD_DNFH1Cerrar.cs - Automatic processing of commands.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace FiscalProto
{
	public interface IMI_DNFH1Cerrar_ClassInterface
	{
		int NumReemplazo1 { get; set; }
		string TextoReemplazo1 { get; set; }
		int NumReemplazo2 { get; set; }
		string TextoReemplazo2 { get; set; }
		int NumReemplazo3 { get; set; }
		string TextoReemplazo3 { get; set; }
		bool CortaPapel { get; set; }
		bool Colas { get; set; }
		byte[] GetCommand();
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MI_DNFH1Cerrar 
		: MInput
		, IMI_DNFH1Cerrar_ClassInterface
	{
		public int NumReemplazo1 { get; set; }
		public string TextoReemplazo1 { get; set; }
		public int NumReemplazo2 { get; set; }
		public string TextoReemplazo2 { get; set; }
		public int NumReemplazo3 { get; set; }
		public string TextoReemplazo3 { get; set; }
		public bool CortaPapel { get; set; }
		public bool Colas { get; set; }
		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(CortaPapel) extension |= 0x01;
				if(Colas) extension |= 0x400;
				SetOpcode(0x0E06, extension, list);
				Append_N(list, NumReemplazo1, 3, 0, true);
				Append_RT(list, TextoReemplazo1, -1, 0, true);
				Append_N(list, NumReemplazo2, 3, 0, true);
				Append_RT(list, TextoReemplazo2, -1, 0, true);
				Append_N(list, NumReemplazo3, 3, 0, true);
				Append_RT(list, TextoReemplazo3, -1, 0, true);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}


	public interface IMO_DNFH1Cerrar_ClassInterface
	{
		int Numero { get; set; }

        string PrinterStatus { get; }
		string FiscalStatus { get; }
		int ErrorCodeInt { get; }

		void SetFromCommand(byte[] bindata);
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MO_DNFH1Cerrar  
		: MOutput
		, IMO_DNFH1Cerrar_ClassInterface
	{
		public int Numero { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Numero = Extract_N(data, 6, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}


	public interface ICMD_DNFH1Cerrar_ClassInterface
	{
		CmdStatus Status {  get ; }
		string Nombre { get; }
		int Opcode { get; }
		string Description { get; }

		IMI_DNFH1Cerrar_ClassInterface Input { get; }
		IMO_DNFH1Cerrar_ClassInterface Output { get; }
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class CMD_DNFH1Cerrar 
	    : CMD_Generic
		, ICMD_DNFH1Cerrar_ClassInterface
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "DNFH1Cerrar"; }}
		public override int Opcode { get { return 0x0E06; }}
		public override string Description { get { return "Cierra el documento no fiscal en curso."; }}

		public IMI_DNFH1Cerrar_ClassInterface Input { get; protected set; }
		public IMO_DNFH1Cerrar_ClassInterface Output { get; protected set; }

		public void SetDefaults()
		{
			Input = new MI_DNFH1Cerrar();
			Output = new MO_DNFH1Cerrar();
		}

		// Ctor
		public CMD_DNFH1Cerrar()
		{
			SetDefaults();
		}
	}

}

// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_JORGetInfoVentasJornada.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Jornada_Fiscal
{
	public class MI_JORGetInfoVentasJornada : MInput
	{

		[Description("Tipo de documento para el que se requiere la información."), Category("Datos")]
		public int TipoDoc { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si las ventas se acumularán desde el último cierre de cajero (bit en 1) o desde el inicio de la jornada fiscal (bit en 0)\n" +
			"false: No, true: Si")]
		public bool SoloCajero { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(SoloCajero) extension |= 0x100;
				SetOpcode(0x080A, extension, list);
				Append_N(list, TipoDoc, 3, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_JORGetInfoVentasJornada  : MOutput
	{

		[Description("Fecha de apertura de la jornada fiscal."), Category("Datos"), ReadOnly(true)]
		public int FecApertura { get; set; }

		[Description("Hora de apertura de la jornada fiscal."), Category("Datos"), ReadOnly(true)]
		public int HoraApertura { get; set; }

		[Description("Número de la última ZETA emitida."), Category("Datos"), ReadOnly(true)]
		public int UltZeta { get; set; }

		[Description("Se requiere una nueva ZETA porque cambió el día respecto de la apertura de la jornada fiscal."), Category("Datos"), ReadOnly(true)]
		public bool ZetaRequerida { get; set; }

		[Description("Fecha de apertura del primer comprobante impreso."), Category("Datos"), ReadOnly(true)]
		public int FecAperturaComprob { get; set; }

		[Description("Hora de apertura del primer comprobante impreso."), Category("Datos"), ReadOnly(true)]
		public int HoraAperturaComprob { get; set; }

		[Description("Cantidad de documentos emitidos."), Category("Datos"), ReadOnly(true)]
		public int CantDoc { get; set; }

		[Description("Cantidad de documentos cancelados."), Category("Datos"), ReadOnly(true)]
		public int CantCancel { get; set; }

		[Description("Total bruto de ventas."), Category("Datos"), ReadOnly(true)]
		public decimal TotVentas { get; set; }

		[Description("Total de IVA facturado."), Category("Datos"), ReadOnly(true)]
		public decimal TotIVA { get; set; }

		[Description("Total de Impuestos Internos fijos facturados."), Category("Datos"), ReadOnly(true)]
		public decimal TotImpIntFijo { get; set; }

		[Description("Total de Impuestos Internos porcentuales facturados."), Category("Datos"), ReadOnly(true)]
		public decimal TotImpIntPorc { get; set; }

		[Description("Total de 'Otros Tributos' facturados."), Category("Datos"), ReadOnly(true)]
		public decimal TotOtrosTributos { get; set; }

		[Description("Indica si la jornada fiscal está o no iniciada."), Category("Datos"), ReadOnly(true)]
		public bool JornadaIniciada { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					FecApertura = Extract_D(data, 6, false);
					HoraApertura = Extract_T(data, 6, false);
					UltZeta = Extract_N(data, 5, false);
					ZetaRequerida = Extract_Y(data, 1, false);
					FecAperturaComprob = Extract_D(data, 6, false);
					HoraAperturaComprob = Extract_D(data, 6, false);
					CantDoc = Extract_N(data, 10, false);
					CantCancel = Extract_N(data, 10, false);
					TotVentas = Extract_N(data, 12, 2, false);
					TotIVA = Extract_N(data, 12, 2, false);
					TotImpIntFijo = Extract_N(data, 12, 2, false);
					TotImpIntPorc = Extract_N(data, 12, 2, false);
					TotOtrosTributos = Extract_N(data, 12, 2, false);
					JornadaIniciada = Extract_Y(data, 1, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_JORGetInfoVentasJornada 
	    : CMD_CommandBase<MI_JORGetInfoVentasJornada, MO_JORGetInfoVentasJornada>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "JORGetInfoVentasJornada"; }}
		public override int Opcode { get { return 0x080A; }}
		public override string Description { get { return "Devuelve información electrónica de la jornada en curso."; }}

		// Ctor
		public CMD_JORGetInfoVentasJornada()
		{
			Input = new MI_JORGetInfoVentasJornada();
			Output = new MO_JORGetInfoVentasJornada();
		}
	}
}

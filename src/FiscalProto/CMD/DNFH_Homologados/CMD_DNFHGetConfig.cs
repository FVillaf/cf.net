// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_DNFHGetConfig.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.DNFH_Homologados
{
	public class MI_DNFHGetConfig : MInput
	{

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				SetOpcode(0x1009, extension, list);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_DNFHGetConfig  : MOutput
	{

		[Description("Imprime información sobre el total pagado y el vuelto."), Category("Datos"), ReadOnly(true)]
		public bool PrintInfoPago { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado1 { get; set; }

		[Description("Imprime lineas en blanco separando la cola del cuerpo de la operación."), Category("Datos"), ReadOnly(true)]
		public bool AddBlank { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado2 { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado3 { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado4 { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado5 { get; set; }

		[Description("Imprime lineas con el nombre de fantasia del comercio."), Category("Datos"), ReadOnly(true)]
		public bool PrintFANT { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado6 { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado7 { get; set; }

		[Description("Imprime las lineas de logo."), Category("Datos"), ReadOnly(true)]
		public bool PrintHeader { get; set; }

		[Description("Reservadi."), Category("Datos"), ReadOnly(true)]
		public string Reservado { get; set; }

		[Description("Separa la linea de TOTAL con lineas en blanco antes y despues."), Category("Datos"), ReadOnly(true)]
		public bool AddBlankTotal { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado8 { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado9 { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado10 { get; set; }

		[Description("Imprime el codigo QR del contribuyente."), Category("Datos"), ReadOnly(true)]
		public bool PrintQR { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					PrintInfoPago = Extract_Y(data, 1, false);
					Reservado1 = Extract_Reservado(data, 1, false);
					AddBlank = Extract_Y(data, 1, false);
					Reservado2 = Extract_Reservado(data, 1, false);
					Reservado3 = Extract_Reservado(data, 1, false);
					Reservado4 = Extract_Reservado(data, 1, false);
					Reservado5 = Extract_Reservado(data, 1, false);
					PrintFANT = Extract_Y(data, 1, false);
					Reservado6 = Extract_Reservado(data, 1, false);
					Reservado7 = Extract_Reservado(data, 1, false);
					PrintHeader = Extract_Y(data, 1, false);
					Reservado = Extract_Reservado(data, 1, false);
					AddBlankTotal = Extract_Y(data, 1, false);
					Reservado8 = Extract_Reservado(data, 1, false);
					Reservado9 = Extract_Reservado(data, 1, false);
					Reservado10 = Extract_Reservado(data, 1, false);
					PrintQR = Extract_Y(data, 1, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_DNFHGetConfig 
	    : CMD_CommandBase<MI_DNFHGetConfig, MO_DNFHGetConfig>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "DNFHGetConfig"; }}
		public override int Opcode { get { return 0x1009; }}
		public override string Description { get { return "Obtiene la configuracion por default para todos los documentos no fiscales homologados que se emitan."; }}

		// Ctor
		public CMD_DNFHGetConfig()
		{
			Input = new MI_DNFHGetConfig();
			Output = new MO_DNFHGetConfig();
		}
	}
}

// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_DNFHAbrir.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.DNFH_Homologados
{
	public class MI_DNFHAbrir : MInput
	{

		[Description("Código del DNFH a imprimir."), Category("Datos")]
		public int TipoDoc { get; set; }

		[Description("Linea #1 con el nombre del cliente o comprador."), Category("Datos")]
		public string NomCliente1 { get; set; }

		[Description("Linea #2 con el nombre del cliente o comprador."), Category("Datos")]
		public string NomCliente2 { get; set; }

		[Description("Linea #1 con la dirección del cliente o comprador."), Category("Datos")]
		public string DirecCliente1 { get; set; }

		[Description("Linea #2 con la dirección del cliente o comprador."), Category("Datos")]
		public string DirecCliente2 { get; set; }

		[Description("Linea #3 con la dirección del cliente o comprador."), Category("Datos")]
		public string DirecCliente3 { get; set; }

		[Description("Tipo de documento del cliente o comprador."), Category("Datos")]
		public TipoDocEnum TipoDocCli { get; set; }

		[Description("Número de documento del cliente o comprador."), Category("Datos")]
		public string NroDocCli { get; set; }

		[Description("Responsabilidad ante el IVA del cliente o comprador."), Category("Datos")]
		public TipoRespEnum RespIvaCli { get; set; }

		[Description("Linea #1 del documento asociado (Remito)."), Category("Datos")]
		public string LineaDoc1 { get; set; }

		[Description("Linea #2 del documento asociado (Remito)."), Category("Datos")]
		public string LineaDoc2 { get; set; }

		[Description("Linea #3 del documento asociado (Remito)."), Category("Datos")]
		public string LineaDoc3 { get; set; }

		[Description("Linea de 'Cheque de Reintegro para Turista."), Category("Datos")]
		public string LineaCheque { get; set; }

		[Description("Razón social del transportista - Linea #1."), Category("Datos")]
		public string RSTransportista1 { get; set; }

		[Description("Razón social del transportista - Linea #2."), Category("Datos")]
		public string RSTransportista2 { get; set; }

		[Description("Linea #1 con la dirección del transportista."), Category("Datos")]
		public string DirecTransportista1 { get; set; }

		[Description("Linea #2 con la dirección del transportista."), Category("Datos")]
		public string DirecTransportista2 { get; set; }

		[Description("Linea #3 con la dirección del transportista."), Category("Datos")]
		public string DirecTransportista3 { get; set; }

		[Description("Tipo de documento del transportista."), Category("Datos")]
		public TipoDocEnum TipoDocTransp { get; set; }

		[Description("Número de documento del transportista."), Category("Datos")]
		public string NroDocTransp { get; set; }

		[Description("Responsabilidad ante el IVA del transportista."), Category("Datos")]
		public TipoRespEnum RespIvaTransp { get; set; }

		[Description("Linea #1 con el nombre del cliente o comprador."), Category("Datos")]
		public string NomChofer1 { get; set; }

		[Description("Linea #2 con el nombre del cliente o comprador."), Category("Datos")]
		public string NomChofer2 { get; set; }

		[Description("Tipo de documento del chofer."), Category("Datos")]
		public TipoDocEnum TipoDocChofer { get; set; }

		[Description("Número de documento del chofer."), Category("Datos")]
		public string NroDocChofer { get; set; }

		[Description("Dominio del vehiculo/Extra info #1."), Category("Datos")]
		public string ExtraInfo1 { get; set; }

		[Description("Dominio del vehiculo/Extra info #2."), Category("Datos")]
		public string ExtraInfo2 { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si imprime o no el triplicado del documento.\n" +
			"false: No, true: Si")]
		public bool ImprimeTriplicado { get; set; }

		[Category("Extension")]
		[Description(
			"Almacena las descripciones adicionales de losn items\n" +
			"false: No, true: Si")]
		public bool AlmacenaDesc { get; set; }

		[Category("Extension")]
		[Description(
			"Conserva los atributos de impresión de las descripciones\n" +
			"false: No, true: Si")]
		public bool ConservaAttrib { get; set; }

		[Category("Extension")]
		[Description(
			"Conserva solamente la primera descripción adicional (No=Conserva todas)\n" +
			"false: No, true: Si")]
		public bool SoloPrimeraDesc { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(ImprimeTriplicado) extension |= 0x02;
				if(AlmacenaDesc) extension |= 0x80;
				if(ConservaAttrib) extension |= 0x100;
				if(SoloPrimeraDesc) extension |= 0x200;
				SetOpcode(0x1001, extension, list);
				Append_N(list, TipoDoc, 3, 0, false);
				Append_RT(list, NomCliente1, -1, 0, false);
				Append_RT(list, NomCliente2, -1, 0, true);
				Append_RT(list, DirecCliente1, -1, 0, true);
				Append_RT(list, DirecCliente2, -1, 0, true);
				Append_RT(list, DirecCliente3, -1, 0, true);
				Append_L(list, ((char)TipoDocCli).ToString(), 1, 0, false);
				Append_A(list, NroDocCli, 20, 0, false);
				Append_L(list, ((char)RespIvaCli).ToString(), 1, 0, false);
				Append_RT(list, LineaDoc1, -1, 0, true);
				Append_RT(list, LineaDoc2, -1, 0, true);
				Append_RT(list, LineaDoc3, -1, 0, true);
				Append_RT(list, LineaCheque, -1, 0, true);
				Append_RT(list, RSTransportista1, -1, 0, true);
				Append_RT(list, RSTransportista2, -1, 0, true);
				Append_RT(list, DirecTransportista1, -1, 0, true);
				Append_RT(list, DirecTransportista2, -1, 0, true);
				Append_RT(list, DirecTransportista3, -1, 0, true);
				Append_L(list, ((char)TipoDocTransp).ToString(), 1, 0, true);
				Append_A(list, NroDocTransp, 20, 0, true);
				Append_L(list, ((char)RespIvaTransp).ToString(), 1, 0, false);
				Append_RT(list, NomChofer1, -1, 0, true);
				Append_RT(list, NomChofer2, -1, 0, true);
				Append_L(list, ((char)TipoDocChofer).ToString(), 1, 0, true);
				Append_A(list, NroDocChofer, 20, 0, true);
				Append_RT(list, ExtraInfo1, -1, 0, true);
				Append_RT(list, ExtraInfo2, -1, 0, true);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_DNFHAbrir  : MOutput
	{

		[Description("Numero de comprobante abierto."), Category("Datos"), ReadOnly(true)]
		public int Numero { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Numero = Extract_N(data, 10, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_DNFHAbrir 
	    : CMD_CommandBase<MI_DNFHAbrir, MO_DNFHAbrir>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "DNFHAbrir"; }}
		public override int Opcode { get { return 0x1001; }}
		public override string Description { get { return "Abre un documento no fiscal homologado."; }}

		// Ctor
		public CMD_DNFHAbrir()
		{
			Input = new MI_DNFHAbrir();
			Output = new MO_DNFHAbrir();
		}
	}
}

// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2022 - Federico Villafañes (federvillaf@hotmail.com)
// http://www.moretti.com.ar y Federico Villafañes - All Rights Reserved

// CMD_DNFHSetConfig.cs - Automatic processing of commands.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace FiscalProto
{
	public interface IMI_DNFHSetConfig_ClassInterface
	{
		string DescPagoAutom { get; set; }
		int CodPagoAutom { get; set; }
		bool PrintInfoPago { get; set; }
		bool AddBlank { get; set; }
		bool Ignorado1 { get; set; }
		bool PrintFANT { get; set; }
		bool Ignorado2 { get; set; }
		bool Ignorado3 { get; set; }
		bool PrintHeader { get; set; }
		bool AddBlankTotal { get; set; }
		bool Ignorado4 { get; set; }
		bool PrintQR { get; set; }
		byte[] GetCommand();
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MI_DNFHSetConfig 
		: MInput
		, IMI_DNFHSetConfig_ClassInterface
	{
		public string DescPagoAutom { get; set; }
		public int CodPagoAutom { get; set; }
		public bool PrintInfoPago { get; set; }
		public bool AddBlank { get; set; }
		public bool Ignorado1 { get; set; }
		public bool PrintFANT { get; set; }
		public bool Ignorado2 { get; set; }
		public bool Ignorado3 { get; set; }
		public bool PrintHeader { get; set; }
		public bool AddBlankTotal { get; set; }
		public bool Ignorado4 { get; set; }
		public bool PrintQR { get; set; }
		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(PrintInfoPago) extension |= 0x01;
				if(AddBlank) extension |= 0x04;
				if(Ignorado1) extension |= 0x40;
				if(PrintFANT) extension |= 0x80;
				if(Ignorado2) extension |= 0x100;
				if(Ignorado3) extension |= 0x200;
				if(PrintHeader) extension |= 0x400;
				if(AddBlankTotal) extension |= 0x1000;
				if(Ignorado4) extension |= 0x2000;
				if(PrintQR) extension |= 0x4000;
				SetOpcode(0x1008, extension, list);
				Append_RT(list, DescPagoAutom, -1, 0, true);
				Append_N(list, CodPagoAutom, 2, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}


	public interface IMO_DNFHSetConfig_ClassInterface
	{

        string PrinterStatus { get; }
		string FiscalStatus { get; }
		int ErrorCodeInt { get; }

		void SetFromCommand(byte[] bindata);
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MO_DNFHSetConfig  
		: MOutput
		, IMO_DNFHSetConfig_ClassInterface
	{

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}


	public interface ICMD_DNFHSetConfig_ClassInterface
	{
		CmdStatus Status {  get ; }
		string Nombre { get; }
		int Opcode { get; }
		string Description { get; }

		IMI_DNFHSetConfig_ClassInterface Input { get; }
		IMO_DNFHSetConfig_ClassInterface Output { get; }
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class CMD_DNFHSetConfig 
	    : CMD_Generic
		, ICMD_DNFHSetConfig_ClassInterface
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "DNFHSetConfig"; }}
		public override int Opcode { get { return 0x1008; }}
		public override string Description { get { return "Configura las preferencias para TODOS los documentos no fiscales homologados que se emitan."; }}

		public IMI_DNFHSetConfig_ClassInterface Input { get; protected set; }
		public IMO_DNFHSetConfig_ClassInterface Output { get; protected set; }

		public void SetDefaults()
		{
			Input = new MI_DNFHSetConfig();
			Output = new MO_DNFHSetConfig();
		}

		// Ctor
		public CMD_DNFHSetConfig()
		{
			SetDefaults();
		}
	}

}

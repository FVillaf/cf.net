// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_DNFH1Cerrar.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.DNFH_Genericos
{
	public class MI_DNFH1Cerrar : MInput
	{

		[Description("Indica el número de línea de la cola que se reemplazará."), Category("Datos")]
		public int NumReemplazo1 { get; set; }

		[Description("El texto con el que se reemplazará la línea de cola."), Category("Datos")]
		public string TextoReemplazo1 { get; set; }

		[Description("Indica el número de línea de la cola que se reemplazará."), Category("Datos")]
		public int NumReemplazo2 { get; set; }

		[Description("El texto con el que se reemplazará la línea de cola."), Category("Datos")]
		public string TextoReemplazo2 { get; set; }

		[Description("Indica el número de línea de la cola que se reemplazará."), Category("Datos")]
		public int NumReemplazo3 { get; set; }

		[Description("El texto con el que se reemplazará la línea de cola."), Category("Datos")]
		public string TextoReemplazo3 { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si corta o no el papel al completar éste documento.\n" +
			"false: No, true: Si")]
		public bool CortaPapel { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si imprime o no las colas al pie del documento.\n" +
			"false: No, true: Si")]
		public bool Colas { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(CortaPapel) extension |= 0x01;
				if(Colas) extension |= 0x400;
				SetOpcode(0x0E06, extension, list);
				Append_N(list, NumReemplazo1, 3, 0, true);
				Append_RT(list, TextoReemplazo1, -1, 0, true);
				Append_N(list, NumReemplazo2, 3, 0, true);
				Append_RT(list, TextoReemplazo2, -1, 0, true);
				Append_N(list, NumReemplazo3, 3, 0, true);
				Append_RT(list, TextoReemplazo3, -1, 0, true);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_DNFH1Cerrar  : MOutput
	{

		[Description("Número de documento no fiscal homologado que se imprimió."), Category("Datos"), ReadOnly(true)]
		public int Numero { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Numero = Extract_N(data, 6, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_DNFH1Cerrar 
	    : CMD_CommandBase<MI_DNFH1Cerrar, MO_DNFH1Cerrar>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "DNFH1Cerrar"; }}
		public override int Opcode { get { return 0x0E06; }}
		public override string Description { get { return "Cierra el documento no fiscal en curso."; }}

		// Ctor
		public CMD_DNFH1Cerrar()
		{
			Input = new MI_DNFH1Cerrar();
			Output = new MO_DNFH1Cerrar();
		}
	}
}

// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_NCSubtotal.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Nota_de_Credito
{
	public class MI_NCSubtotal : MInput
	{

		[Category("Extension")]
		[Description(
			"Imprime el subtotal\n" +
			"false: No, true: Si")]
		public bool Print { get; set; }

		[Description("Indica si el subtotal se debe devolver bruto o neto"), Category("Extension")]
		public NCS_TipoSubtotal TipoSubtotal { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Print) extension |= 0x01;
				extension |= ((((int) TipoSubtotal) & 0x0003) << 2);
				SetOpcode(0x0D03, extension, list);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_NCSubtotal  : MOutput
	{

		[Description("Subtotal parcial del ticket (bruto)."), Category("Datos"), ReadOnly(true)]
		public decimal MontoBruto { get; set; }

		[Description("Subtotal parcial del ticket (neto)."), Category("Datos"), ReadOnly(true)]
		public decimal MontoNeto { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					MontoBruto = Extract_N(data, 12, 4, true);
					MontoNeto = Extract_N(data, 12, 4, true);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_NCSubtotal 
	    : CMD_CommandBase<MI_NCSubtotal, MO_NCSubtotal>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "NCSubtotal"; }}
		public override int Opcode { get { return 0x0D03; }}
		public override string Description { get { return "Calcula los totales de la operaci√≥n actual y lo imprime y/o devuelve en la respuesta."; }}

		// Ctor
		public CMD_NCSubtotal()
		{
			Input = new MI_NCSubtotal();
			Output = new MO_NCSubtotal();
		}
	}

	public enum NCS_TipoSubtotal 
	{
		Bruto = 0,	// 00
		Neto = 1,	// 01
		Bruto_Neto = 2,	// 10
		Nada = 3,	// 11
	};
}

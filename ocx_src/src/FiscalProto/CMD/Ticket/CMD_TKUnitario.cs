// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2022 - Federico Villafañes (federvillaf@hotmail.com)
// http://www.moretti.com.ar y Federico Villafañes - All Rights Reserved

// CMD_TKUnitario.cs - Automatic processing of commands.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace FiscalProto
{
	public interface IMI_TKUnitario_ClassInterface
	{
		string ItemDescExtra1 { get; set; }
		string ItemDescExtra2 { get; set; }
		string ItemDescExtra3 { get; set; }
		string ItemDescExtra4 { get; set; }
		string Descrip { get; set; }
		decimal Cantidad { get; set; }
		decimal Unitario { get; set; }
		int TasaIVA { get; set; }
		decimal ImpIntFijos { get; set; }
		decimal ImpIntPorc { get; set; }
		int UnidadMTX { get; set; }
		string CodigoMTX { get; set; }
		string CodigoInt { get; set; }
		CodUnidadMedida CodigoMedida { get; set; }
		CodTKItemCondIva CondIVA { get; set; }
		string PagoDescExtra1 { get; set; }
		string PagoDescExtra2 { get; set; }
		int Cuotas { get; set; }
		string DetaAdic { get; set; }
		string DetaCupon { get; set; }
		CodMedioDePago Codigo { get; set; }
		decimal Monto { get; set; }
		int RNumLinea1 { get; set; }
		string RTextLinea1 { get; set; }
		int RNumLinea2 { get; set; }
		string RTextLinea2 { get; set; }
		int RNumLinea3 { get; set; }
		string RTextLinea3 { get; set; }
		int LBlanco { get; set; }
		bool ConRespuesta { get; set; }
		bool TipoDoc { get; set; }
		byte[] GetCommand();
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MI_TKUnitario 
		: MInput
		, IMI_TKUnitario_ClassInterface
	{
		public string ItemDescExtra1 { get; set; }
		public string ItemDescExtra2 { get; set; }
		public string ItemDescExtra3 { get; set; }
		public string ItemDescExtra4 { get; set; }
		public string Descrip { get; set; }
		public decimal Cantidad { get; set; }
		public decimal Unitario { get; set; }
		public int TasaIVA { get; set; }
		public decimal ImpIntFijos { get; set; }
		public decimal ImpIntPorc { get; set; }
		public int UnidadMTX { get; set; }
		public string CodigoMTX { get; set; }
		public string CodigoInt { get; set; }
		public CodUnidadMedida CodigoMedida { get; set; }
		public CodTKItemCondIva CondIVA { get; set; }
		public string PagoDescExtra1 { get; set; }
		public string PagoDescExtra2 { get; set; }
		public int Cuotas { get; set; }
		public string DetaAdic { get; set; }
		public string DetaCupon { get; set; }
		public CodMedioDePago Codigo { get; set; }
		public decimal Monto { get; set; }
		public int RNumLinea1 { get; set; }
		public string RTextLinea1 { get; set; }
		public int RNumLinea2 { get; set; }
		public string RTextLinea2 { get; set; }
		public int RNumLinea3 { get; set; }
		public string RTextLinea3 { get; set; }
		public int LBlanco { get; set; }
		public bool ConRespuesta { get; set; }
		public bool TipoDoc { get; set; }
		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(ConRespuesta) extension |= 0x01;
				if(TipoDoc) extension |= 0x4000;
				SetOpcode(0x0A30, extension, list);
				Append_RT(list, ItemDescExtra1, -1, 0, true);
				Append_RT(list, ItemDescExtra2, -1, 0, true);
				Append_RT(list, ItemDescExtra3, -1, 0, true);
				Append_RT(list, ItemDescExtra4, -1, 0, true);
				Append_RT(list, Descrip, -1, 0, false);
				Append_N(list, Cantidad, 5, 4, false);
				Append_N(list, Unitario, 7, 4, false);
				Append_N(list, TasaIVA, 4, 0, false);
				Append_N(list, ImpIntFijos, 7, 4, true);
				Append_N(list, ImpIntPorc, 0, 8, true);
				Append_N(list, UnidadMTX, 6, 0, true);
				Append_A(list, CodigoMTX, 13, 0, true);
				Append_A(list, CodigoInt, 50, 0, true);
				Append_N(list, (int)CodigoMedida, 2, 0, false);
				Append_N(list, (int)CondIVA, 1, 0, true);
				Append_RT(list, PagoDescExtra1, -1, 0, true);
				Append_RT(list, PagoDescExtra2, -1, 0, true);
				Append_N(list, Cuotas, 3, 0, true);
				Append_RT(list, DetaAdic, -1, 0, true);
				Append_RT(list, DetaCupon, -1, 0, true);
				Append_N(list, (int)Codigo, 2, 0, false);
				Append_N(list, Monto, 10, 2, false);
				Append_N(list, RNumLinea1, 3, 0, true);
				Append_RT(list, RTextLinea1, -1, 0, true);
				Append_N(list, RNumLinea2, 3, 0, true);
				Append_RT(list, RTextLinea2, -1, 0, true);
				Append_N(list, RNumLinea3, 3, 0, true);
				Append_RT(list, RTextLinea3, -1, 0, true);
				Append_N(list, LBlanco, 1, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}


	public interface IMO_TKUnitario_ClassInterface
	{
		int NumTicket { get; set; }
		decimal Total { get; set; }
		decimal Iva { get; set; }
		decimal Vuelto { get; set; }

        string PrinterStatus { get; }
		string FiscalStatus { get; }
		int ErrorCodeInt { get; }

		void SetFromCommand(byte[] bindata);
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MO_TKUnitario  
		: MOutput
		, IMO_TKUnitario_ClassInterface
	{
		public int NumTicket { get; set; }
		public decimal Total { get; set; }
		public decimal Iva { get; set; }
		public decimal Vuelto { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NumTicket = Extract_N(data, 8, true);
					Total = Extract_N(data, 10, 2, true);
					Iva = Extract_N(data, 10, 2, true);
					Vuelto = Extract_N(data, 10, 2, true);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}


	public interface ICMD_TKUnitario_ClassInterface
	{
		CmdStatus Status {  get ; }
		string Nombre { get; }
		int Opcode { get; }
		string Description { get; }

		IMI_TKUnitario_ClassInterface Input { get; }
		IMO_TKUnitario_ClassInterface Output { get; }
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class CMD_TKUnitario 
	    : CMD_Generic
		, ICMD_TKUnitario_ClassInterface
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "TKUnitario"; }}
		public override int Opcode { get { return 0x0A30; }}
		public override string Description { get { return "Emite rápidamente un ticket o nota de crédito que posee un único ítem de venta y un solo pago, el cuál es opcional."; }}

		public IMI_TKUnitario_ClassInterface Input { get; protected set; }
		public IMO_TKUnitario_ClassInterface Output { get; protected set; }

		public void SetDefaults()
		{
			Input = new MI_TKUnitario();
			Output = new MO_TKUnitario();
		}

		// Ctor
		public CMD_TKUnitario()
		{
			SetDefaults();
		}
	}

}

// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_NCGetVentas.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Nota_de_Credito
{
	public class MI_NCGetVentas : MInput
	{

		[Category("Extension")]
		[Description(
			"Indica si discriminar o totalizar la información, por cada tasa de IVA\n" +
			"false: Discriminado, true: Totalizado")]
		public bool Discriminar { get; set; }

		[Category("Extension")]
		[Description(
			"Indica como retornar los montos, según el tipo de operación que se esté emitiendo.\n" +
			"false: Brutos para A/C y netos para B/C, true: Netos para A/C y brutos para B/C")]
		public bool TipoMonto { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Discriminar) extension |= 0x01;
				if(TipoMonto) extension |= 0x08;
				SetOpcode(0x0D0D, extension, list);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_NCGetVentas  : MOutput
	{

		[Description("Total (bruto o neto, según el bit 'TipoMonto') de la operación en curso."), Category("Datos"), ReadOnly(true)]
		public decimal Total { get; set; }

		[Description("Total de la operación en curso, sin 'Otros Tributos'."), Category("Datos"), ReadOnly(true)]
		public decimal TotalLimpio { get; set; }

		[Description("Tasa de IVA facturado (1/7)."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA_1 { get; set; }

		[Description("Monto bruto facturado a la tasa indicada antes (1/7)."), Category("Datos"), ReadOnly(true)]
		public decimal Monto_1 { get; set; }

		[Description("Tasa de IVA facturado (2/7)."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA_2 { get; set; }

		[Description("Monto bruto facturado a la tasa indicada antes (2/7)."), Category("Datos"), ReadOnly(true)]
		public decimal Monto_2 { get; set; }

		[Description("Tasa de IVA facturado (3/7)."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA_3 { get; set; }

		[Description("Monto bruto facturado a la tasa indicada antes (3/7)."), Category("Datos"), ReadOnly(true)]
		public decimal Monto_3 { get; set; }

		[Description("Tasa de IVA facturado (4/7)."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA_4 { get; set; }

		[Description("Monto bruto facturado a la tasa indicada antes (4/7)."), Category("Datos"), ReadOnly(true)]
		public decimal Monto_4 { get; set; }

		[Description("Tasa de IVA facturado (5/7)."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA_5 { get; set; }

		[Description("Monto bruto facturado a la tasa indicada antes (5/7)."), Category("Datos"), ReadOnly(true)]
		public decimal Monto_5 { get; set; }

		[Description("Tasa de IVA facturado (6/7)."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA_6 { get; set; }

		[Description("Monto bruto facturado a la tasa indicada antes (6/7)."), Category("Datos"), ReadOnly(true)]
		public decimal Monto_6 { get; set; }

		[Description("Tasa de IVA facturado (7/7)."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA_7 { get; set; }

		[Description("Monto bruto facturado a la tasa indicada antes (7/7)."), Category("Datos"), ReadOnly(true)]
		public decimal Monto_7 { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Total = Extract_N(data, 10, 2, false);
					TotalLimpio = Extract_N(data, 10, 2, false);
					TasaIVA_1 = Extract_N(data, 4, true);
					Monto_1 = Extract_N(data, 10, 2, true);
					TasaIVA_2 = Extract_N(data, 4, true);
					Monto_2 = Extract_N(data, 10, 2, true);
					TasaIVA_3 = Extract_N(data, 4, true);
					Monto_3 = Extract_N(data, 10, 2, true);
					TasaIVA_4 = Extract_N(data, 4, true);
					Monto_4 = Extract_N(data, 10, 2, true);
					TasaIVA_5 = Extract_N(data, 4, true);
					Monto_5 = Extract_N(data, 10, 2, true);
					TasaIVA_6 = Extract_N(data, 4, true);
					Monto_6 = Extract_N(data, 10, 2, true);
					TasaIVA_7 = Extract_N(data, 4, true);
					Monto_7 = Extract_N(data, 10, 2, true);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_NCGetVentas 
	    : CMD_CommandBase<MI_NCGetVentas, MO_NCGetVentas>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "NCGetVentas"; }}
		public override int Opcode { get { return 0x0D0D; }}
		public override string Description { get { return "Obtiene información detallada sobre las ventas realizadas en la operación en curso."; }}

		// Ctor
		public CMD_NCGetVentas()
		{
			Input = new MI_NCGetVentas();
			Output = new MO_NCGetVentas();
		}
	}
}

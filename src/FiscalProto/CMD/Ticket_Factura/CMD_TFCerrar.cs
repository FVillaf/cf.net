// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_TFCerrar.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Ticket_Factura
{
	public class MI_TFCerrar : MInput
	{

		[Description("Numero de linea de la 'cola', a reemplazar (1/3)."), Category("Datos")]
		public int RNumLinea1 { get; set; }

		[Description("Texto de la linea de la 'cola' a usar (1/3)."), Category("Datos")]
		public string RTextLinea1 { get; set; }

		[Description("Numero de linea de la 'cola', a reemplazar (2/3)."), Category("Datos")]
		public int RNumLinea2 { get; set; }

		[Description("Texto de la linea de la 'cola' a usar (2/3)."), Category("Datos")]
		public string RTextLinea2 { get; set; }

		[Description("Numero de linea de la 'cola', a reemplazar (3/3)."), Category("Datos")]
		public int RNumLinea3 { get; set; }

		[Description("Texto de la linea de la 'cola' a usar (3/3)."), Category("Datos")]
		public string RTextLinea3 { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si corta o no el ticket\n" +
			"false: No, true: Si")]
		public bool UsaCutter { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si devuelve respuesta electronica\n" +
			"false: No, true: Si")]
		public bool SendAnswer { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si a 'Su Vuelto' lo imprime con o sin atributos\n" +
			"false: Sin atributos, true: Con atributos")]
		public bool PrintSuVuelto { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si usa cuenta corriente, cuando el pago es automatico (es decir, si no se enviaron pagos usando el comando 0A05)\n" +
			"false: No, true: Si")]
		public bool AutoCC { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si imprime el total de unidades o bultos\n" +
			"false: No, true: Si")]
		public bool PrintUnid { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(UsaCutter) extension |= 0x01;
				if(SendAnswer) extension |= 0x02;
				if(PrintSuVuelto) extension |= 0x04;
				if(AutoCC) extension |= 0x10;
				if(PrintUnid) extension |= 0x100;
				SetOpcode(0x0B06, extension, list);
				Append_N(list, RNumLinea1, 3, 0, true);
				Append_RT(list, RTextLinea1, -1, 0, true);
				Append_N(list, RNumLinea2, 3, 0, true);
				Append_RT(list, RTextLinea2, -1, 0, true);
				Append_N(list, RNumLinea3, 3, 0, true);
				Append_RT(list, RTextLinea3, -1, 0, true);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_TFCerrar  : MOutput
	{

		[Description("Numero del ticket fiscal emitido."), Category("Datos"), ReadOnly(true)]
		public int NumTicket { get; set; }

		[Description("Tipo de operación (A/B/C/M) emitida."), Category("Datos"), ReadOnly(true)]
		public string Tipo { get; set; }

		[Description("Monto total de la operacion (bruto)."), Category("Datos"), ReadOnly(true)]
		public decimal Total { get; set; }

		[Description("Monto total de IVA facturado (o descontado, si es Nota de Credito)."), Category("Datos"), ReadOnly(true)]
		public decimal Iva { get; set; }

		[Description("Vuelto final."), Category("Datos"), ReadOnly(true)]
		public decimal Vuelto { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NumTicket = Extract_N(data, 8, true);
					Tipo = Extract_L(data, 1, true);
					Total = Extract_N(data, 10, 2, true);
					Iva = Extract_N(data, 10, 2, true);
					Vuelto = Extract_N(data, 10, 2, true);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_TFCerrar 
	    : CMD_CommandBase<MI_TFCerrar, MO_TFCerrar>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "TFCerrar"; }}
		public override int Opcode { get { return 0x0B06; }}
		public override string Description { get { return "Cierra el ticket factura (o nota de débito), agregandolo a la lista de operaciones diarias."; }}

		// Ctor
		public CMD_TFCerrar()
		{
			Input = new MI_TFCerrar();
			Output = new MO_TFCerrar();
		}
	}
}

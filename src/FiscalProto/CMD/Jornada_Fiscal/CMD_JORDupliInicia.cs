// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_JORDupliInicia.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Jornada_Fiscal
{
	public class MI_JORDupliInicia : MInput
	{

		[Description("Tipo de documento para el que se requiere el duplicado."), Category("Datos")]
		public int TipoDoc { get; set; }

		[Description("Número de los documentos a descargar (si son mas de uno, los números se separan con comas)."), Category("Datos")]
		public string NumeroDoc { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si imprime o no el duplicado\n" +
			"false: No, true: Si")]
		public bool Print { get; set; }

		[Category("Extension")]
		[Description(
			"Zipea el archivo durante la descarga, para agilizarla\n" +
			"false: No, true: Si")]
		public bool Zipeado { get; set; }

		[Category("Extension")]
		[Description(
			"Descarga la auditoria en un pendrive\n" +
			"false: No, true: Si")]
		public bool Pendrive { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Print) extension |= 0x01;
				if(Zipeado) extension |= 0x04;
				if(Pendrive) extension |= 0x10;
				SetOpcode(0x08F0, extension, list);
				Append_N(list, TipoDoc, 3, 0, false);
				Append_A(list, NumeroDoc, -1, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_JORDupliInicia  : MOutput
	{

		[Description("Largo del archivo a descargar, en bytes."), Category("Datos"), ReadOnly(true)]
		public int Largo { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Largo = Extract_N(data, 10, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_JORDupliInicia 
	    : CMD_CommandBase<MI_JORDupliInicia, MO_JORDupliInicia>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "JORDupliInicia"; }}
		public override int Opcode { get { return 0x08F0; }}
		public override string Description { get { return "Inicia la descarga (o reimpresión) de un documento emitido con anterioridad."; }}

		// Ctor
		public CMD_JORDupliInicia()
		{
			Input = new MI_JORDupliInicia();
			Output = new MO_JORDupliInicia();
		}
	}
}

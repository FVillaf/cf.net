// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_DisplayConfig.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Configuracion
{
	public class MI_DisplayConfig : MInput
	{

		[Description("Cantidad de segundos despues de cerrar un docfiscal antes que comience en el display a mostrarse la hora."), Category("Datos")]
		public int Timeout { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si imprime o no el total, cuando se envia el comando subtotal\n" +
			"false: no, true: si")]
		public bool Subtotal { get; set; }

		[Description("Indica el comportamiento del display al reaccionar a un comando de Item"), Category("Extension")]
		public DC_Item Item { get; set; }

		[Description("Indica el comportamiento en el display al reaccionar a un comando de cierre de documento fiscal."), Category("Extension")]
		public DC_Cierre Cierre { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Subtotal) extension |= 0x04;
				extension |= (((int) Item) & 0x0003);
				extension |= ((((int) Cierre) & 0x0003) << 8);
				SetOpcode(0x05D1, extension, list);
				Append_N(list, Timeout, 3, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_DisplayConfig  : MOutput
	{

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_DisplayConfig 
	    : CMD_CommandBase<MI_DisplayConfig, MO_DisplayConfig>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "DisplayConfig"; }}
		public override int Opcode { get { return 0x05D1; }}
		public override string Description { get { return "Configura el comportamiento autom√°tico del display."; }}

		// Ctor
		public CMD_DisplayConfig()
		{
			Input = new MI_DisplayConfig();
			Output = new MO_DisplayConfig();
		}
	}

	public enum DC_Item 
	{
		ItemNada = 0,	// 00
		CantXUnit = 1,	// 01
		ItemUnitario = 2,	// 10
		ItemTotal = 3,	// 11
	};

	public enum DC_Cierre 
	{
		CierreNada = 0,	// 00
		CierreTotal = 1,	// 01
		CierreVuelto = 2,	// 10
	};
}

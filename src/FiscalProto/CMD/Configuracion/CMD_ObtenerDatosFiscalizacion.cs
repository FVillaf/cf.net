// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_ObtenerDatosFiscalizacion.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Configuracion
{
	public class MI_ObtenerDatosFiscalizacion : MInput
	{

		[Category("Extension")]
		[Description(
			"Imprime documento con los datos de fiscalizacion\n" +
			"false: No, true: Si")]
		public bool Print { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Print) extension |= 0x01;
				SetOpcode(0x0507, extension, list);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_ObtenerDatosFiscalizacion  : MOutput
	{

		[Description("Razón Social."), Category("Datos"), ReadOnly(true)]
		public string RazonSocial { get; set; }

		[Description("CUIT."), Category("Datos"), ReadOnly(true)]
		public string Cuit { get; set; }

		[Description("Numero de Punto de Venta (Caja)."), Category("Datos"), ReadOnly(true)]
		public int PtoVta { get; set; }

		[Description("Responsabilidad ante el IVA."), Category("Datos"), ReadOnly(true)]
		public string RespIVA { get; set; }

		[Description("Tipo de ticket factura A a emitir."), Category("Datos"), ReadOnly(true)]
		public string TipoTicket { get; set; }

		[Description("Tasa estandard de IVA."), Category("Datos"), ReadOnly(true)]
		public int TasaIVA { get; set; }

		[Description("Fecha de fiscalización."), Category("Datos"), ReadOnly(true)]
		public int FechaFiscal { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					RazonSocial = Extract_P(data, 50, false);
					Cuit = Extract_P(data, 13, false);
					PtoVta = Extract_N(data, 5, false);
					RespIVA = Extract_P(data, 1, false);
					TipoTicket = Extract_P(data, 2, false);
					TasaIVA = Extract_N(data, 4, false);
					FechaFiscal = Extract_D(data, 6, true);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_ObtenerDatosFiscalizacion 
	    : CMD_CommandBase<MI_ObtenerDatosFiscalizacion, MO_ObtenerDatosFiscalizacion>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "ObtenerDatosFiscalizacion"; }}
		public override int Opcode { get { return 0x0507; }}
		public override string Description { get { return "Obtiene los datos de fiscalización configurados en el controlador fiscal."; }}

		// Ctor
		public CMD_ObtenerDatosFiscalizacion()
		{
			Input = new MI_ObtenerDatosFiscalizacion();
			Output = new MO_ObtenerDatosFiscalizacion();
		}
	}
}

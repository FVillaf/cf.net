// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2022 - Federico Villafa침es (federvillaf@hotmail.com)
// http://www.moretti.com.ar y Federico Villafa침es - All Rights Reserved

// CMD_TKGetInfo.cs - Automatic processing of commands.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace FiscalProto
{
	public interface IMI_TKGetInfo_ClassInterface
	{
		byte[] GetCommand();
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MI_TKGetInfo 
		: MInput
		, IMI_TKGetInfo_ClassInterface
	{
		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				SetOpcode(0x0A0A, extension, list);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}


	public interface IMO_TKGetInfo_ClassInterface
	{
		int NumTicket { get; set; }
		decimal TotBruto { get; set; }
		decimal TotPagado { get; set; }
		decimal TotIva { get; set; }
		decimal TotImpInt { get; set; }
		int CantItems { get; set; }
		int CantItemsMax { get; set; }
		int CantDesc { get; set; }
		int CantDescMax { get; set; }
		int CantTax { get; set; }
		int CantTaxMax { get; set; }
		int CantPag { get; set; }
		int CantPagMax { get; set; }
		int Fase { get; set; }

        string PrinterStatus { get; }
		string FiscalStatus { get; }
		int ErrorCodeInt { get; }

		void SetFromCommand(byte[] bindata);
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MO_TKGetInfo  
		: MOutput
		, IMO_TKGetInfo_ClassInterface
	{
		public int NumTicket { get; set; }
		public decimal TotBruto { get; set; }
		public decimal TotPagado { get; set; }
		public decimal TotIva { get; set; }
		public decimal TotImpInt { get; set; }
		public int CantItems { get; set; }
		public int CantItemsMax { get; set; }
		public int CantDesc { get; set; }
		public int CantDescMax { get; set; }
		public int CantTax { get; set; }
		public int CantTaxMax { get; set; }
		public int CantPag { get; set; }
		public int CantPagMax { get; set; }
		public int Fase { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NumTicket = Extract_N(data, 8, false);
					TotBruto = Extract_N(data, 10, 2, false);
					TotPagado = Extract_N(data, 10, 2, false);
					TotIva = Extract_N(data, 10, 2, false);
					TotImpInt = Extract_N(data, 10, 2, false);
					CantItems = Extract_N(data, 4, false);
					CantItemsMax = Extract_N(data, 4, false);
					CantDesc = Extract_N(data, 2, false);
					CantDescMax = Extract_N(data, 2, false);
					CantTax = Extract_N(data, 2, false);
					CantTaxMax = Extract_N(data, 2, false);
					CantPag = Extract_N(data, 2, false);
					CantPagMax = Extract_N(data, 2, false);
					Fase = Extract_N(data, 2, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}


	public interface ICMD_TKGetInfo_ClassInterface
	{
		CmdStatus Status {  get ; }
		string Nombre { get; }
		int Opcode { get; }
		string Description { get; }

		IMI_TKGetInfo_ClassInterface Input { get; }
		IMO_TKGetInfo_ClassInterface Output { get; }
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class CMD_TKGetInfo 
	    : CMD_Generic
		, ICMD_TKGetInfo_ClassInterface
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "TKGetInfo"; }}
		public override int Opcode { get { return 0x0A0A; }}
		public override string Description { get { return "Obtiene informaci칩n de la operaci칩n en curso."; }}

		public IMI_TKGetInfo_ClassInterface Input { get; protected set; }
		public IMO_TKGetInfo_ClassInterface Output { get; protected set; }

		public void SetDefaults()
		{
			Input = new MI_TKGetInfo();
			Output = new MO_TKGetInfo();
		}

		// Ctor
		public CMD_TKGetInfo()
		{
			SetDefaults();
		}
	}

}

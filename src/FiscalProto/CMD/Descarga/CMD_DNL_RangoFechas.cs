// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_DNL_RangoFechas.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Descarga
{
	public class MI_DNL_RangoFechas : MInput
	{

		[Description("Fecha desde la que se requiere información."), Category("Datos")]
		public int FechaDesde { get; set; }

		[Description("Fecha hasta la que se requiere información (inclusiva)."), Category("Datos")]
		public int FechaHasta { get; set; }

		[Category("Extension")]
		[Description(
			"El archivo se descarga en formato ZIP, para reducir los tiempos de descarga\n" +
			"false: No, true: Si")]
		public bool Zipeado { get; set; }

		[Category("Extension")]
		[Description(
			"Descarga el archivo a pendrive y no por el port serial o de red\n" +
			"false: No, true: Si")]
		public bool Pendrive { get; set; }

		[Description("Indica el archivo que se desea descargar"), Category("Extension")]
		public DNLRF_Selector Selector { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Zipeado) extension |= 0x01;
				if(Pendrive) extension |= 0x08;
				extension |= ((((int) Selector) & 0x0003) << 1);
				SetOpcode(0x0951, extension, list);
				Append_D(list, FechaDesde, 6, 0, false);
				Append_D(list, FechaHasta, 6, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_DNL_RangoFechas  : MOutput
	{

		[Description("Nombre del archivo que se descargará."), Category("Datos"), ReadOnly(true)]
		public string NomArchivo { get; set; }

		[Description("Largo del archivo a descargar, en bytes."), Category("Datos"), ReadOnly(true)]
		public int Largo { get; set; }

		[Description("No hay zetas en el rango solicidato, el archivo descargado está vacío."), Category("Datos"), ReadOnly(true)]
		public bool Vacio { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NomArchivo = Extract_P(data, -1, false);
					Largo = Extract_N(data, 10, false);
					Vacio = Extract_Y(data, 1, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_DNL_RangoFechas 
	    : CMD_CommandBase<MI_DNL_RangoFechas, MO_DNL_RangoFechas>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "DNL_RangoFechas"; }}
		public override int Opcode { get { return 0x0951; }}
		public override string Description { get { return "Descarga información digital, indicando el rango de fechas para las que se requiere la información."; }}

		// Ctor
		public CMD_DNL_RangoFechas()
		{
			Input = new MI_DNL_RangoFechas();
			Output = new MO_DNL_RangoFechas();
		}
	}

	public enum DNLRF_Selector 
	{
		CTD = 0,	// 00
		DUPLI_A = 1,	// 01
		RESUMEN = 2,	// 10
	};
}

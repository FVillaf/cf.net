// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_ObtenerInfoEquipo.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Diagnostico
{
	public class MI_ObtenerInfoEquipo : MInput
	{

		[Category("Extension")]
		[Description(
			"Imprime o no un documento con las características fiscales.\n" +
			"false: No, true: Si")]
		public bool Print { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si desea información compatible con EPSON o si prefiere información extendida de Moretti.\n" +
			"false: Epson, true: Moretti")]
		public bool Compatible { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Print) extension |= 0x01;
				if(Compatible) extension |= 0x02;
				SetOpcode(0x020A, extension, list);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_ObtenerInfoEquipo  : MOutput
	{

		[Description("Nombre de la versión."), Category("Datos"), ReadOnly(true)]
		public string NomVersion { get; set; }

		[Description("ID del país."), Category("Datos"), ReadOnly(true)]
		public int IDPais { get; set; }

		[Description("Versión del firmware (mayor)."), Category("Datos"), ReadOnly(true)]
		public int VersionH { get; set; }

		[Description("Versión del firmware (menor)."), Category("Datos"), ReadOnly(true)]
		public int VersionL { get; set; }

		[Description("Versión de compilación firmware."), Category("Datos"), ReadOnly(true)]
		public int VersionC { get; set; }

		[Description("ID del mecanismo impresor."), Category("Datos"), ReadOnly(true)]
		public int IDImpresor { get; set; }

		[Description("Nombre del mecanismo impresor."), Category("Datos"), ReadOnly(true)]
		public string NomImpresor { get; set; }

		[Description("Capacidad de la memoria fiscal (en bytes)."), Category("Datos"), ReadOnly(true)]
		public int CapacidadMF { get; set; }

		[Description("Capacidad de la memoria de transacciones (en bytes)."), Category("Datos"), ReadOnly(true)]
		public int CapacidadMT { get; set; }

		[Description("Capacidad de la memoria de trabajo (en bytes)."), Category("Datos"), ReadOnly(true)]
		public int CapacidadMW { get; set; }

		[Description("Jumper de servicio conectado."), Category("Datos"), ReadOnly(true)]
		public bool JumperTecnico { get; set; }

		[Description("Estado de los dip switches."), Category("Datos"), ReadOnly(true)]
		public byte[] DipSwitches { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NomVersion = Extract_P(data, 20, false);
					IDPais = Extract_N(data, 3, false);
					VersionH = Extract_N(data, 2, false);
					VersionL = Extract_N(data, 2, false);
					VersionC = Extract_N(data, 3, false);
					IDImpresor = Extract_N(data, 2, false);
					NomImpresor = Extract_P(data, -1, false);
					CapacidadMF = Extract_N(data, 7, false);
					CapacidadMT = Extract_N(data, 10, false);
					CapacidadMW = Extract_N(data, 6, false);
					JumperTecnico = Extract_Y(data, 1, false);
					DipSwitches = Extract_B(data, 1, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_ObtenerInfoEquipo 
	    : CMD_CommandBase<MI_ObtenerInfoEquipo, MO_ObtenerInfoEquipo>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "ObtenerInfoEquipo"; }}
		public override int Opcode { get { return 0x020A; }}
		public override string Description { get { return "Obtiene las características fiscales del controlador fiscal."; }}

		// Ctor
		public CMD_ObtenerInfoEquipo()
		{
			Input = new MI_ObtenerInfoEquipo();
			Output = new MO_ObtenerInfoEquipo();
		}
	}
}

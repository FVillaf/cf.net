// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_TKOtroTributo.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Ticket
{
	public class MI_TKOtroTributo : MInput
	{

		[Description("Descripción del tributo que se agrega a la operación en curso."), Category("Datos")]
		public string Descrip { get; set; }

		[Description("Monto neto del tributo."), Category("Datos")]
		public decimal Monto { get; set; }

		[Description("Tasa de IVA asociada."), Category("Datos")]
		public int TasaIVA { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si la información de éste comando es para agregar un nuevo tributo, o para anular un tributo agregado con anterioridad\n" +
			"false: Agregar, true: Anular")]
		public bool Accion { get; set; }

		[Category("Extension")]
		[Description(
			"Devuelve el subtotal de la operación en la respuesta de éste comando\n" +
			"false: No, true: Si")]
		public bool RetSubtot { get; set; }

		[Description("Indica el tipo de tributo a agregar a la operación en curso"), Category("Extension")]
		public TKOT_Tipo Tipo { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Accion) extension |= 0x01;
				if(RetSubtot) extension |= 0x400;
				extension |= ((((int) Tipo) & 0x000F) << 6);
				SetOpcode(0x0A20, extension, list);
				Append_RT(list, Descrip, -1, 0, false);
				Append_N(list, Monto, 10, 2, false);
				Append_N(list, TasaIVA, 4, 0, true);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_TKOtroTributo  : MOutput
	{

		[Description("Subtotal parcial (bruto) de la operación en curso."), Category("Datos"), ReadOnly(true)]
		public decimal Subtotal { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Subtotal = Extract_N(data, 10, 2, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_TKOtroTributo 
	    : CMD_CommandBase<MI_TKOtroTributo, MO_TKOtroTributo>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "TKOtroTributo"; }}
		public override int Opcode { get { return 0x0A20; }}
		public override string Description { get { return "Aplica un tributo adicional la operación en curso."; }}

		// Ctor
		public CMD_TKOtroTributo()
		{
			Input = new MI_TKOtroTributo();
			Output = new MO_TKOtroTributo();
		}
	}

	public enum TKOT_Tipo 
	{
		ImpNacional = 2,	// 0010
		ImpProvincial = 3,	// 0011
		ImpMunicipal = 5,	// 0101
		ImpInterno = 6,	// 0110
		ImpIngBrutos = 7,	// 0111
		Otros = 9,	// 1001
	};
}

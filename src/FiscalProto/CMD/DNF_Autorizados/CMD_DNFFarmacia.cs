// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_DNFFarmacia.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.DNF_Autorizados
{
	public class MI_DNFFarmacia : MInput
	{

		[Description("Linea de 'Obra Social'."), Category("Datos")]
		public string LObraSocial { get; set; }

		[Description("Primera linea de 'Coseguro'."), Category("Datos")]
		public string LCoseguro1 { get; set; }

		[Description("Segunda linea de 'Coseguro'."), Category("Datos")]
		public string LCoseguro2 { get; set; }

		[Description("Tercera linea de 'Coseguro'."), Category("Datos")]
		public string LCoseguro3 { get; set; }

		[Description("Linea de 'Fecha de Vencimiento'."), Category("Datos")]
		public int LFechaVenc { get; set; }

		[Description("Linea de 'Nombre del Afiliado'."), Category("Datos")]
		public string LAfilNom { get; set; }

		[Description("Linea de 'Número del Afiliado'."), Category("Datos")]
		public string LAfilNro { get; set; }

		[Description("Primera linea de 'Domicilio del Afiliado'."), Category("Datos")]
		public string LAfilDom1 { get; set; }

		[Description("Segunda linea de 'Domicilio del Afiliado'."), Category("Datos")]
		public string LAfilDom2 { get; set; }

		[Description("Linea de 'Número de Establecimiento'."), Category("Datos")]
		public string LNroEstab { get; set; }

		[Description("Linea de 'Comprobante Interno'."), Category("Datos")]
		public string LCompInterno { get; set; }

		[Description("Primera linea de 'Datos Extra'."), Category("Datos")]
		public string LExtra1 { get; set; }

		[Description("Segunda linea de 'Datos Extra'."), Category("Datos")]
		public string LExtra2 { get; set; }

		[Description("Linea de datos libre número 1."), Category("Datos")]
		public string LLibre1 { get; set; }

		[Description("Linea de datos libre número 2."), Category("Datos")]
		public string LLibre2 { get; set; }

		[Description("Linea de datos libre número 3."), Category("Datos")]
		public string LLibre3 { get; set; }

		[Description("Linea de datos libre número 4."), Category("Datos")]
		public string LLibre4 { get; set; }

		[Description("Linea de datos libre número 5."), Category("Datos")]
		public string LLibre5 { get; set; }

		[Description("Linea de datos libre número 6."), Category("Datos")]
		public string LLibre6 { get; set; }

		[Description("Si se indica, número de línea de la cola a reemplazar #1."), Category("Datos")]
		public int ReempColaNum1 { get; set; }

		[Description("Si se indica, texto de línea de la cola a reemplazar #1."), Category("Datos")]
		public string ReempColaTexto1 { get; set; }

		[Description("Si se indica, número de línea de la cola a reemplazar #2."), Category("Datos")]
		public int ReempColaNum2 { get; set; }

		[Description("Si se indica, texto de línea de la cola a reemplazar #2."), Category("Datos")]
		public string ReempColaTexto2 { get; set; }

		[Description("Si se indica, número de línea de la cola a reemplazar #3."), Category("Datos")]
		public int ReempColaNum3 { get; set; }

		[Description("Si se indica, texto de línea de la cola a reemplazar #3."), Category("Datos")]
		public string ReempColaTexto3 { get; set; }

		[Category("Extension")]
		[Description(
			"Corta el papel después de éste documento.\n" +
			"false: No, true: Si")]
		public bool Cut { get; set; }

		[Category("Extension")]
		[Description(
			"Tipo de Obra Social.\n" +
			"false: Prepaga, true: ObraSocial")]
		public bool TipoOS { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime los pagos recibidos.\n" +
			"false: No, true: Si")]
		public bool PrintPagos { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime la línea de domicilio.\n" +
			"false: No, true: Si")]
		public bool PrintDomi { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de documento.\n" +
			"false: No, true: Si")]
		public bool PrintDoc { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de firma.\n" +
			"false: No, true: Si")]
		public bool PrintFirma { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de aclaración de firma.\n" +
			"false: No, true: Si")]
		public bool PrintAclara { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de teléfono.\n" +
			"false: No, true: Si")]
		public bool PrintTelef { get; set; }

		[Category("Extension")]
		[Description(
			"Imprimir Cantidades.\n" +
			"false: No, true: Si")]
		public bool PrintCantid { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime las líneas de encabezamiento y colas.\n" +
			"false: No, true: Si")]
		public bool PrintHeader { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime las líneas de encabezamiento.\n" +
			"false: No, true: Si")]
		public bool PrintEstab { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Cut) extension |= 0x01;
				if(TipoOS) extension |= 0x02;
				if(PrintPagos) extension |= 0x04;
				if(PrintDomi) extension |= 0x08;
				if(PrintDoc) extension |= 0x10;
				if(PrintFirma) extension |= 0x20;
				if(PrintAclara) extension |= 0x40;
				if(PrintTelef) extension |= 0x80;
				if(PrintCantid) extension |= 0x100;
				if(PrintHeader) extension |= 0x400;
				if(PrintEstab) extension |= 0x800;
				SetOpcode(0x0F02, extension, list);
				Append_RT(list, LObraSocial, -1, 0, true);
				Append_RT(list, LCoseguro1, -1, 0, true);
				Append_RT(list, LCoseguro2, -1, 0, true);
				Append_RT(list, LCoseguro3, -1, 0, true);
				Append_D(list, LFechaVenc, 6, 0, true);
				Append_RT(list, LAfilNom, -1, 0, true);
				Append_RT(list, LAfilNro, -1, 0, true);
				Append_RT(list, LAfilDom1, -1, 0, true);
				Append_RT(list, LAfilDom2, -1, 0, true);
				Append_RT(list, LNroEstab, -1, 0, true);
				Append_RT(list, LCompInterno, -1, 0, true);
				Append_RT(list, LExtra1, -1, 0, true);
				Append_RT(list, LExtra2, -1, 0, true);
				Append_RT(list, LLibre1, -1, 0, true);
				Append_RT(list, LLibre2, -1, 0, true);
				Append_RT(list, LLibre3, -1, 0, true);
				Append_RT(list, LLibre4, -1, 0, true);
				Append_RT(list, LLibre5, -1, 0, true);
				Append_RT(list, LLibre6, -1, 0, true);
				Append_N(list, ReempColaNum1, 3, 0, true);
				Append_RT(list, ReempColaTexto1, -1, 0, true);
				Append_N(list, ReempColaNum2, 3, 0, true);
				Append_RT(list, ReempColaTexto2, -1, 0, true);
				Append_N(list, ReempColaNum3, 3, 0, true);
				Append_RT(list, ReempColaTexto3, -1, 0, true);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_DNFFarmacia  : MOutput
	{

		[Description("Número de documento emitido."), Category("Datos"), ReadOnly(true)]
		public int Numero { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Numero = Extract_N(data, 5, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_DNFFarmacia 
	    : CMD_CommandBase<MI_DNFFarmacia, MO_DNFFarmacia>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "DNFFarmacia"; }}
		public override int Opcode { get { return 0x0F02; }}
		public override string Description { get { return "Realiza la impresión de un documento de farmacia."; }}

		// Ctor
		public CMD_DNFFarmacia()
		{
			Input = new MI_DNFFarmacia();
			Output = new MO_DNFFarmacia();
		}
	}
}

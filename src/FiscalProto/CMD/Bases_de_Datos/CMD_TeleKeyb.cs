// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_TeleKeyb.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Bases_de_Datos
{
	public class MI_TeleKeyb : MInput
	{

		[Description("Secuencia de teclas a enviar al teclado de la Kinder."), Category("Datos")]
		public string Teclas { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				SetOpcode(0x9120, extension, list);
				Append_P(list, Teclas, 5000, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_TeleKeyb  : MOutput
	{

		[Description("Número de documento."), Category("Datos"), ReadOnly(true)]
		public int NroDoc { get; set; }

		[Description("Código de documento."), Category("Datos"), ReadOnly(true)]
		public int CodDoc { get; set; }

		[Description("Total actual del ticket. 0 si el ticket esta cerrado."), Category("Datos"), ReadOnly(true)]
		public decimal Total { get; set; }

		[Description("Número de cierre diario (Z) actual."), Category("Datos"), ReadOnly(true)]
		public int NumZeta { get; set; }

		[Description("Error al ejecutar el comando (0 -> sin error)."), Category("Datos"), ReadOnly(true)]
		public int ErrorActual { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NroDoc = Extract_N(data, 10, false);
					CodDoc = Extract_N(data, 3, false);
					Total = Extract_N(data, 16, 2, false);
					NumZeta = Extract_N(data, 5, false);
					ErrorActual = Extract_N(data, 5, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_TeleKeyb 
	    : CMD_CommandBase<MI_TeleKeyb, MO_TeleKeyb>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "TeleKeyb"; }}
		public override int Opcode { get { return 0x9120; }}
		public override string Description { get { return "Emite pulsaciones de teclas de forma remota y recibe el estado de la registradora."; }}

		// Ctor
		public CMD_TeleKeyb()
		{
			Input = new MI_TeleKeyb();
			Output = new MO_TeleKeyb();
		}
	}
}

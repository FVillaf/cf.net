// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2022 - Federico Villafañes (federvillaf@hotmail.com)
// http://www.moretti.com.ar y Federico Villafañes - All Rights Reserved

// CMD_NCCerrar.cs - Automatic processing of commands.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace FiscalProto
{
	public interface IMI_NCCerrar_ClassInterface
	{
		int RNumLinea1 { get; set; }
		string RTextLinea1 { get; set; }
		int RNumLinea2 { get; set; }
		string RTextLinea2 { get; set; }
		int RNumLinea3 { get; set; }
		string RTextLinea3 { get; set; }
		int LBlanco { get; set; }
		bool UsaCutter { get; set; }
		bool SendAnswer { get; set; }
		bool PrintUnid { get; set; }
		byte[] GetCommand();
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MI_NCCerrar 
		: MInput
		, IMI_NCCerrar_ClassInterface
	{
		public int RNumLinea1 { get; set; }
		public string RTextLinea1 { get; set; }
		public int RNumLinea2 { get; set; }
		public string RTextLinea2 { get; set; }
		public int RNumLinea3 { get; set; }
		public string RTextLinea3 { get; set; }
		public int LBlanco { get; set; }
		public bool UsaCutter { get; set; }
		public bool SendAnswer { get; set; }
		public bool PrintUnid { get; set; }
		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(UsaCutter) extension |= 0x01;
				if(SendAnswer) extension |= 0x02;
				if(PrintUnid) extension |= 0x100;
				SetOpcode(0x0D06, extension, list);
				Append_N(list, RNumLinea1, 3, 0, true);
				Append_RT(list, RTextLinea1, -1, 0, true);
				Append_N(list, RNumLinea2, 3, 0, true);
				Append_RT(list, RTextLinea2, -1, 0, true);
				Append_N(list, RNumLinea3, 3, 0, true);
				Append_RT(list, RTextLinea3, -1, 0, true);
				Append_N(list, LBlanco, 1, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}


	public interface IMO_NCCerrar_ClassInterface
	{
		int NumTicket { get; set; }
		string Tipo { get; set; }
		decimal Total { get; set; }
		decimal Iva { get; set; }
		decimal Vuelto { get; set; }

        string PrinterStatus { get; }
		string FiscalStatus { get; }
		int ErrorCodeInt { get; }

		void SetFromCommand(byte[] bindata);
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class MO_NCCerrar  
		: MOutput
		, IMO_NCCerrar_ClassInterface
	{
		public int NumTicket { get; set; }
		public string Tipo { get; set; }
		public decimal Total { get; set; }
		public decimal Iva { get; set; }
		public decimal Vuelto { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NumTicket = Extract_N(data, 8, true);
					Tipo = Extract_L(data, 1, true);
					Total = Extract_N(data, 10, 2, true);
					Iva = Extract_N(data, 10, 2, true);
					Vuelto = Extract_N(data, 10, 2, true);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}


	public interface ICMD_NCCerrar_ClassInterface
	{
		CmdStatus Status {  get ; }
		string Nombre { get; }
		int Opcode { get; }
		string Description { get; }

		IMI_NCCerrar_ClassInterface Input { get; }
		IMO_NCCerrar_ClassInterface Output { get; }
	}

    [ClassInterface(ClassInterfaceType.None)]
	public class CMD_NCCerrar 
	    : CMD_Generic
		, ICMD_NCCerrar_ClassInterface
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "NCCerrar"; }}
		public override int Opcode { get { return 0x0D06; }}
		public override string Description { get { return "Cierra la nota de crédito, agregandolo a la lista de operaciones diarias."; }}

		public IMI_NCCerrar_ClassInterface Input { get; protected set; }
		public IMO_NCCerrar_ClassInterface Output { get; protected set; }

		public void SetDefaults()
		{
			Input = new MI_NCCerrar();
			Output = new MO_NCCerrar();
		}

		// Ctor
		public CMD_NCCerrar()
		{
			SetDefaults();
		}
	}

}

// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_DNFTarjeta.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.DNF_Autorizados
{
	public class MI_DNFTarjeta : MInput
	{

		[Description("Linea de 'tipo'."), Category("Datos")]
		public string LTipo { get; set; }

		[Description("Linea de 'tarjeta'."), Category("Datos")]
		public string LTarjeta { get; set; }

		[Description("Linea de 'cliente'."), Category("Datos")]
		public string LCliente { get; set; }

		[Description("Linea de 'fecha vencimiento'."), Category("Datos")]
		public int LVencim { get; set; }

		[Description("Linea de 'Número de Establecimiento'."), Category("Datos")]
		public string LEstab { get; set; }

		[Description("Linea de 'Número de Cupon'."), Category("Datos")]
		public string LCupon { get; set; }

		[Description("Linea de 'Comprobante'."), Category("Datos")]
		public string LComprob { get; set; }

		[Description("Linea de 'Código de Autorización'."), Category("Datos")]
		public string LAutoriz { get; set; }

		[Description("Linea de 'Operación'."), Category("Datos")]
		public string LOperacion { get; set; }

		[Description("Linea de 'Importe' de la operación."), Category("Datos")]
		public decimal LImporte { get; set; }

		[Description("Linea de cantidad de 'Cuotas'."), Category("Datos")]
		public int LCuotas { get; set; }

		[Description("Linea de 'Moneda'."), Category("Datos")]
		public string LMoneda { get; set; }

		[Description("Linea de 'Número de Terminal'."), Category("Datos")]
		public string LTerminal { get; set; }

		[Description("Linea de 'Lote'."), Category("Datos")]
		public string LLote { get; set; }

		[Description("Linea de 'TPV (Terminal de Punto de Venta)'."), Category("Datos")]
		public string LTpv { get; set; }

		[Description("Linea de identificación de 'Sucursal'."), Category("Datos")]
		public string LSucu { get; set; }

		[Description("Linea de identificación de 'Operador'."), Category("Datos")]
		public string LOpe { get; set; }

		[Description("Linea de número de 'Referencia'."), Category("Datos")]
		public string LReferen { get; set; }

		[Description("Linea de datos libre número 1."), Category("Datos")]
		public string LLibre1 { get; set; }

		[Description("Linea de datos libre número 2."), Category("Datos")]
		public string LLibre2 { get; set; }

		[Description("Linea de datos libre número 3."), Category("Datos")]
		public string LLibre3 { get; set; }

		[Description("Linea de datos libre número 4."), Category("Datos")]
		public string LLibre4 { get; set; }

		[Description("Linea de datos libre número 5."), Category("Datos")]
		public string LLibre5 { get; set; }

		[Description("Linea de datos libre número 6."), Category("Datos")]
		public string LLibre6 { get; set; }

		[Description("Si se indica, número de línea de la cola a reemplazar #1."), Category("Datos")]
		public int ReempColaNum1 { get; set; }

		[Description("Si se indica, texto de línea de la cola a reemplazar #1."), Category("Datos")]
		public string ReempColaTexto1 { get; set; }

		[Description("Si se indica, número de línea de la cola a reemplazar #2."), Category("Datos")]
		public int ReempColaNum2 { get; set; }

		[Description("Si se indica, texto de línea de la cola a reemplazar #2."), Category("Datos")]
		public string ReempColaTexto2 { get; set; }

		[Description("Si se indica, número de línea de la cola a reemplazar #3."), Category("Datos")]
		public int ReempColaNum3 { get; set; }

		[Description("Si se indica, texto de línea de la cola a reemplazar #3."), Category("Datos")]
		public string ReempColaTexto3 { get; set; }

		[Category("Extension")]
		[Description(
			"Corta el papel después de éste documento.\n" +
			"false: No, true: Si")]
		public bool Cut { get; set; }

		[Category("Extension")]
		[Description(
			"Corta el papel después de éste documento.\n" +
			"false: No, true: Si")]
		public bool PrintDomi { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de documento.\n" +
			"false: No, true: Si")]
		public bool PrintDoc { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de firma.\n" +
			"false: No, true: Si")]
		public bool PrintFirma { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de aclaración de firma.\n" +
			"false: No, true: Si")]
		public bool PrintAclara { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime o no la línea de teléfono.\n" +
			"false: No, true: Si")]
		public bool PrintTelef { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime las líneas de encabezamiento y colas.\n" +
			"false: No, true: Si")]
		public bool PrintHeader { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime las líneas de encabezamiento.\n" +
			"false: No, true: Si")]
		public bool PrintEstab { get; set; }

		[Description("Tipo de comprobante a emitr."), Category("Extension")]
		public DNFT_Tipo Tipo { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Cut) extension |= 0x01;
				if(PrintDomi) extension |= 0x08;
				if(PrintDoc) extension |= 0x10;
				if(PrintFirma) extension |= 0x20;
				if(PrintAclara) extension |= 0x40;
				if(PrintTelef) extension |= 0x80;
				if(PrintHeader) extension |= 0x400;
				if(PrintEstab) extension |= 0x800;
				extension |= ((((int) Tipo) & 0x0003) << 8);
				SetOpcode(0x0F01, extension, list);
				Append_RT(list, LTipo, -1, 0, true);
				Append_RT(list, LTarjeta, -1, 0, true);
				Append_RT(list, LCliente, -1, 0, true);
				Append_D(list, LVencim, 6, 0, true);
				Append_RT(list, LEstab, -1, 0, true);
				Append_RT(list, LCupon, -1, 0, false);
				Append_RT(list, LComprob, -1, 0, true);
				Append_RT(list, LAutoriz, -1, 0, true);
				Append_RT(list, LOperacion, -1, 0, true);
				Append_N(list, LImporte, 16, 2, true);
				Append_N(list, LCuotas, 4, 0, true);
				Append_RT(list, LMoneda, -1, 0, true);
				Append_RT(list, LTerminal, -1, 0, true);
				Append_RT(list, LLote, -1, 0, true);
				Append_RT(list, LTpv, -1, 0, true);
				Append_RT(list, LSucu, -1, 0, true);
				Append_RT(list, LOpe, -1, 0, true);
				Append_RT(list, LReferen, -1, 0, true);
				Append_RT(list, LLibre1, -1, 0, true);
				Append_RT(list, LLibre2, -1, 0, true);
				Append_RT(list, LLibre3, -1, 0, true);
				Append_RT(list, LLibre4, -1, 0, true);
				Append_RT(list, LLibre5, -1, 0, true);
				Append_RT(list, LLibre6, -1, 0, true);
				Append_N(list, ReempColaNum1, 3, 0, true);
				Append_RT(list, ReempColaTexto1, -1, 0, true);
				Append_N(list, ReempColaNum2, 3, 0, true);
				Append_RT(list, ReempColaTexto2, -1, 0, true);
				Append_N(list, ReempColaNum3, 3, 0, true);
				Append_RT(list, ReempColaTexto3, -1, 0, true);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_DNFTarjeta  : MOutput
	{

		[Description("Número de documento emitido."), Category("Datos"), ReadOnly(true)]
		public int Numero { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					Numero = Extract_N(data, 5, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_DNFTarjeta 
	    : CMD_CommandBase<MI_DNFTarjeta, MO_DNFTarjeta>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "DNFTarjeta"; }}
		public override int Opcode { get { return 0x0F01; }}
		public override string Description { get { return "Realiza la impresión de un documento de respaldo de operaciones en tarjeta de crédito, débito o talones promocionales."; }}

		// Ctor
		public CMD_DNFTarjeta()
		{
			Input = new MI_DNFTarjeta();
			Output = new MO_DNFTarjeta();
		}
	}

	public enum DNFT_Tipo 
	{
		TCredito = 0,	// 00
		TDebito = 1,	// 01
		TPromo = 2,	// 10
	};
}

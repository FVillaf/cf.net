// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_TKGetConfig.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Ticket
{
	public class MI_TKGetConfig : MInput
	{

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				SetOpcode(0x0A09, extension, list);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_TKGetConfig  : MOutput
	{

		[Description("Imprime información sobre el total pagado y el vuelto."), Category("Datos"), ReadOnly(true)]
		public bool PrintInfoPago { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado1 { get; set; }

		[Description("Imprime lineas en blanco separando el encabezado y cola del cuerpo del ticket."), Category("Datos"), ReadOnly(true)]
		public bool AddBlank { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado2 { get; set; }

		[Description("Imprime la leyenda 'A CONSUMIDOR FINAL'."), Category("Datos"), ReadOnly(true)]
		public bool PrintACF { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado3 { get; set; }

		[Description("Imprime lineas de domicilio comercial."), Category("Datos"), ReadOnly(true)]
		public bool PrintDOM { get; set; }

		[Description("Imprime lineas con el nombre de fantasia del comercio."), Category("Datos"), ReadOnly(true)]
		public bool PrintFANT { get; set; }

		[Description("Imprime la linea de 'Ingresos Brutos' en el encabezamiento."), Category("Datos"), ReadOnly(true)]
		public bool PrintIB { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado4 { get; set; }

		[Description("Imprime las lineas de logo."), Category("Datos"), ReadOnly(true)]
		public bool PrintHeader { get; set; }

		[Description("Realiza pagos automáticos."), Category("Datos"), ReadOnly(true)]
		public bool UsaAutoPag { get; set; }

		[Description("Separa la linea de TOTAL con lineas en blanco antes y despues."), Category("Datos"), ReadOnly(true)]
		public bool AddBlankTotal { get; set; }

		[Description("Imprime el total de cantidades unitarias (bultos)."), Category("Datos"), ReadOnly(true)]
		public bool PrintCantid { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado5 { get; set; }

		[Description("Reservado."), Category("Datos"), ReadOnly(true)]
		public string Reservado6 { get; set; }

		[Description("Imprime el codigo QR del contribuyente."), Category("Datos"), ReadOnly(true)]
		public bool PrintQR { get; set; }

		[Description("Descripción a usar cuando se necesite el 'Pago Automatico'."), Category("Datos"), ReadOnly(true)]
		public string DescPagoAutom { get; set; }

		[Description("Codigo a usar cuando se ncesite el 'Pago Automatico'."), Category("Datos"), ReadOnly(true)]
		public CodMedioDePago CodPagoAutom { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					PrintInfoPago = Extract_Y(data, 1, false);
					Reservado1 = Extract_Reservado(data, 1, false);
					AddBlank = Extract_Y(data, 1, false);
					Reservado2 = Extract_Reservado(data, 1, false);
					PrintACF = Extract_Y(data, 1, false);
					Reservado3 = Extract_Reservado(data, 1, false);
					PrintDOM = Extract_Y(data, 1, false);
					PrintFANT = Extract_Y(data, 1, false);
					PrintIB = Extract_Y(data, 1, false);
					Reservado4 = Extract_Reservado(data, 1, false);
					PrintHeader = Extract_Y(data, 1, false);
					UsaAutoPag = Extract_Y(data, 1, false);
					AddBlankTotal = Extract_Y(data, 1, false);
					PrintCantid = Extract_Y(data, 1, false);
					Reservado5 = Extract_Reservado(data, 1, false);
					Reservado6 = Extract_Reservado(data, 1, false);
					PrintQR = Extract_Y(data, 1, false);
					DescPagoAutom = Extract_RT(data, -1, false);
					CodPagoAutom = (CodMedioDePago)Extract_N(data, 2, false);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_TKGetConfig 
	    : CMD_CommandBase<MI_TKGetConfig, MO_TKGetConfig>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "TKGetConfig"; }}
		public override int Opcode { get { return 0x0A09; }}
		public override string Description { get { return "Obtiene la configuracion por default para TODOS los tickets (o notas de credito) que se emitan."; }}

		// Ctor
		public CMD_TKGetConfig()
		{
			Input = new MI_TKGetConfig();
			Output = new MO_TKGetConfig();
		}
	}
}

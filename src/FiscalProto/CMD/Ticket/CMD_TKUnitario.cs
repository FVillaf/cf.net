// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_TKUnitario.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Ticket
{
	public class MI_TKUnitario : MInput
	{

		[Description("Descripcion extra #1."), Category("Datos")]
		public string ItemDescExtra1 { get; set; }

		[Description("Descripcion extra #2."), Category("Datos")]
		public string ItemDescExtra2 { get; set; }

		[Description("Descripcion extra #3."), Category("Datos")]
		public string ItemDescExtra3 { get; set; }

		[Description("Descripcion extra #4."), Category("Datos")]
		public string ItemDescExtra4 { get; set; }

		[Description("Descripcion principal del item."), Category("Datos")]
		public string Descrip { get; set; }

		[Description("Cantidad vendida (4 decimales)."), Category("Datos")]
		public decimal Cantidad { get; set; }

		[Description("Precio Unitario (4 decimales)."), Category("Datos")]
		public decimal Unitario { get; set; }

		[Description("Tasa de IVA a usar (los 4 digitos se consideran decimales. Asi, 21% se codifica como 2100."), Category("Datos")]
		public int TasaIVA { get; set; }

		[Description("Impuestos internos fijos (por monto)."), Category("Datos")]
		public decimal ImpIntFijos { get; set; }

		[Description("Coeficiente de impuestos fijos porcentuales. 1.3%, por ejemplo, se codifica como 1300000."), Category("Datos")]
		public decimal ImpIntPorc { get; set; }

		[Description("Unidad de referencia, para el informe Matrix."), Category("Datos")]
		public int UnidadMTX { get; set; }

		[Description("Codigo de producto, para el informe Matrix."), Category("Datos")]
		public string CodigoMTX { get; set; }

		[Description("Codigo interno del producto (tal como lo usa la empresa)."), Category("Datos")]
		public string CodigoInt { get; set; }

		[Description("Codigo de unidad de medida. Ver tabla 'Unidades de Medida'."), Category("Datos")]
		public CodUnidadMedida CodigoMedida { get; set; }

		[Description("Codigo de condicion frente al IVA."), Category("Datos")]
		public CodTKItemCondIva CondIVA { get; set; }

		[Description("Descripcion extra #1."), Category("Datos")]
		public string PagoDescExtra1 { get; set; }

		[Description("Descripcion extra #2."), Category("Datos")]
		public string PagoDescExtra2 { get; set; }

		[Description("Cantidad de cuotas. No enviar este campo o enviarlo en 0 si no se usa."), Category("Datos")]
		public int Cuotas { get; set; }

		[Description("Detalle de otra forma de pago."), Category("Datos")]
		public string DetaAdic { get; set; }

		[Description("Detalle de los cupones."), Category("Datos")]
		public string DetaCupon { get; set; }

		[Description("Codigo de la forma de pago."), Category("Datos")]
		public CodMedioDePago Codigo { get; set; }

		[Description("Monto pagado."), Category("Datos")]
		public decimal Monto { get; set; }

		[Description("Numero de linea de la 'cola', a reemplazar (1/3)."), Category("Datos")]
		public int RNumLinea1 { get; set; }

		[Description("Texto de la linea de la 'cola' a usar (1/3)."), Category("Datos")]
		public string RTextLinea1 { get; set; }

		[Description("Numero de linea de la 'cola', a reemplazar (2/3)."), Category("Datos")]
		public int RNumLinea2 { get; set; }

		[Description("Texto de la linea de la 'cola' a usar (2/3)."), Category("Datos")]
		public string RTextLinea2 { get; set; }

		[Description("Numero de linea de la 'cola', a reemplazar (3/3)."), Category("Datos")]
		public int RNumLinea3 { get; set; }

		[Description("Texto de la linea de la 'cola' a usar (3/3)."), Category("Datos")]
		public string RTextLinea3 { get; set; }

		[Description("Lineas en blanco a dejar, para la firma del cliente."), Category("Datos")]
		public int LBlanco { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si devuelve o no la respuesta en el comando\n" +
			"false: No, true: Si")]
		public bool ConRespuesta { get; set; }

		[Category("Extension")]
		[Description(
			"Indica si abre un ticket o una nota de credito\n" +
			"false: Ticket, true: Nota de Crédito")]
		public bool TipoDoc { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(ConRespuesta) extension |= 0x01;
				if(TipoDoc) extension |= 0x4000;
				SetOpcode(0x0A30, extension, list);
				Append_RT(list, ItemDescExtra1, -1, 0, true);
				Append_RT(list, ItemDescExtra2, -1, 0, true);
				Append_RT(list, ItemDescExtra3, -1, 0, true);
				Append_RT(list, ItemDescExtra4, -1, 0, true);
				Append_RT(list, Descrip, -1, 0, false);
				Append_N(list, Cantidad, 5, 4, false);
				Append_N(list, Unitario, 7, 4, false);
				Append_N(list, TasaIVA, 4, 0, false);
				Append_N(list, ImpIntFijos, 7, 4, true);
				Append_N(list, ImpIntPorc, 0, 8, true);
				Append_N(list, UnidadMTX, 6, 0, true);
				Append_A(list, CodigoMTX, 13, 0, true);
				Append_A(list, CodigoInt, 50, 0, true);
				Append_N(list, (int)CodigoMedida, 2, 0, false);
				Append_N(list, (int)CondIVA, 1, 0, true);
				Append_RT(list, PagoDescExtra1, -1, 0, true);
				Append_RT(list, PagoDescExtra2, -1, 0, true);
				Append_N(list, Cuotas, 3, 0, true);
				Append_RT(list, DetaAdic, -1, 0, true);
				Append_RT(list, DetaCupon, -1, 0, true);
				Append_N(list, (int)Codigo, 2, 0, false);
				Append_N(list, Monto, 10, 2, false);
				Append_N(list, RNumLinea1, 3, 0, true);
				Append_RT(list, RTextLinea1, -1, 0, true);
				Append_N(list, RNumLinea2, 3, 0, true);
				Append_RT(list, RTextLinea2, -1, 0, true);
				Append_N(list, RNumLinea3, 3, 0, true);
				Append_RT(list, RTextLinea3, -1, 0, true);
				Append_N(list, LBlanco, 1, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_TKUnitario  : MOutput
	{

		[Description("Numero del ticket fiscal emitido."), Category("Datos"), ReadOnly(true)]
		public int NumTicket { get; set; }

		[Description("Monto total de la operacion (bruto)."), Category("Datos"), ReadOnly(true)]
		public decimal Total { get; set; }

		[Description("Monto total de IVA facturado (o descontado, si es Nota de Credito)."), Category("Datos"), ReadOnly(true)]
		public decimal Iva { get; set; }

		[Description("Vuelto final."), Category("Datos"), ReadOnly(true)]
		public decimal Vuelto { get; set; }

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
					NumTicket = Extract_N(data, 8, true);
					Total = Extract_N(data, 10, 2, true);
					Iva = Extract_N(data, 10, 2, true);
					Vuelto = Extract_N(data, 10, 2, true);
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_TKUnitario 
	    : CMD_CommandBase<MI_TKUnitario, MO_TKUnitario>
	{
		public override CmdStatus Status {  get { return CmdStatus.EnCurso; }}
		public override string Nombre { get { return "TKUnitario"; }}
		public override int Opcode { get { return 0x0A30; }}
		public override string Description { get { return "Emite rápidamente un ticket o nota de crédito que posee un único ítem de venta y un solo pago, el cuál es opcional."; }}

		// Ctor
		public CMD_TKUnitario()
		{
			Input = new MI_TKUnitario();
			Output = new MO_TKUnitario();
		}
	}
}

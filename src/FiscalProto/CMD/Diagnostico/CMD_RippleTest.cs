// [auto-generated]
// This file was autogenerated by a tool.
// Please, don't edit it directly. Else, your changes could be lost next time the tool is executed.
// If you need to touch this file, remove the [auto-generated] key at top. Then, the tool will skip the regeneration of this file.
//
// Copyright (c) 2017 - Andres Moretti e Hijos S.A - Argentina
// http://www.moretti.com.ar - All Rights Reserved

// CMD_RippleTest.cs - Automatic processing of commands.

using System;
using System.ComponentModel;
using System.Collections.Generic;

namespace FiscalProto.Diagnostico
{
	public class MI_RippleTest : MInput
	{

		[Description("Cantidad de líneas a imprimir (0=Infinito)."), Category("Datos")]
		public int NumLineas { get; set; }

		[Category("Extension")]
		[Description(
			"Estación por la que se imprime el documento\n" +
			"false: Rollo, true: Slip")]
		public bool Estacion { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode UPC-A (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_UPCA { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode UPC-E (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_UPCE { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode EAN13 (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_EAN13 { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode EAN8 (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_EAN8 { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode CODE39 (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_CODE39 { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode ITF (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_ITF { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode CODABAR (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_CODABAR { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode CODE93 (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_CODE93 { get; set; }

		[Category("Extension")]
		[Description(
			"Imprime ejemplo de barcode CODE128 (Moretti)\n" +
			"false: No, true: Si")]
		public bool CB_CODE128 { get; set; }

		public override byte[] GetCommand()
		{
			Error = string.Empty;
			var list = new List<byte>();
			try
			{
				int extension = 0;
				if(Estacion) extension |= 0x01;
				if(CB_UPCA) extension |= 0x02;
				if(CB_UPCE) extension |= 0x04;
				if(CB_EAN13) extension |= 0x08;
				if(CB_EAN8) extension |= 0x10;
				if(CB_CODE39) extension |= 0x20;
				if(CB_ITF) extension |= 0x40;
				if(CB_CODABAR) extension |= 0x80;
				if(CB_CODE93) extension |= 0x100;
				if(CB_CODE128) extension |= 0x200;
				SetOpcode(0x0204, extension, list);
				Append_N(list, NumLineas, 3, 0, false);
			}
			catch(Exception ex) { Error = ex.Message; list.Clear(); }
			return list.ToArray();
		}
	}

	public class MO_RippleTest  : MOutput
	{

		public override void SetFromCommand(byte[] bindata)
		{
			Error = string.Empty;
		    var data = new BinReader(bindata);
			try
			{
				ParseAnswerHeader(data);
                if(this.ErrorCodeInt == 0)
				{
				}
			}
			catch(Exception ex) { Error = ex.Message; }
		}
	}

	public class CMD_RippleTest 
	    : CMD_CommandBase<MI_RippleTest, MO_RippleTest>
	{
		public override CmdStatus Status {  get { return CmdStatus.Listo; }}
		public override string Nombre { get { return "RippleTest"; }}
		public override int Opcode { get { return 0x0204; }}
		public override string Description { get { return "Imprime el documento de ripple test."; }}

		// Ctor
		public CMD_RippleTest()
		{
			Input = new MI_RippleTest();
			Output = new MO_RippleTest();
		}
	}
}
